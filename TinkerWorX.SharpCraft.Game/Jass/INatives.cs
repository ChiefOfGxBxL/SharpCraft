using System;

namespace TinkerWorX.SharpCraft.Game.Jass
{
    public interface INatives
    {
        JassRace ConvertRace(Int32 i);
        JassAllianceType ConvertAllianceType(Int32 i);
        JassRacePreference ConvertRacePref(Int32 i);
        JassIGameState ConvertIGameState(Int32 i);
        JassFGameState ConvertFGameState(Int32 i);
        JassPlayerState ConvertPlayerState(Int32 i);
        JassPlayerScore ConvertPlayerScore(Int32 i);
        JassPlayerGameResult ConvertPlayerGameResult(Int32 i);
        JassUnitState ConvertUnitState(Int32 i);
        JassAIDifficulty ConvertAIDifficulty(Int32 i);
        JassGameEvent ConvertGameEvent(Int32 i);
        JassPlayerEvent ConvertPlayerEvent(Int32 i);
        JassPlayerUnitEvent ConvertPlayerUnitEvent(Int32 i);
        JassWidgetEvent ConvertWidgetEvent(Int32 i);
        JassDialogEvent ConvertDialogEvent(Int32 i);
        JassUnitEvent ConvertUnitEvent(Int32 i);
        JassLimitOp ConvertLimitOp(Int32 i);
        JassUnitType ConvertUnitType(Int32 i);
        JassGameSpeed ConvertGameSpeed(Int32 i);
        JassPlacement ConvertPlacement(Int32 i);
        JassStartLocationPriority ConvertStartLocPrio(Int32 i);
        JassGameDifficulty ConvertGameDifficulty(Int32 i);
        JassGameType ConvertGameType(Int32 i);
        JassMapFlag ConvertMapFlag(Int32 i);
        JassMapVisibility ConvertMapVisibility(Int32 i);
        JassMapSetting ConvertMapSetting(Int32 i);
        JassMapDensity ConvertMapDensity(Int32 i);
        JassMapControl ConvertMapControl(Int32 i);
        JassPlayerColor ConvertPlayerColor(Int32 i);
        JassPlayerSlotState ConvertPlayerSlotState(Int32 i);
        JassVolumeGroup ConvertVolumeGroup(Int32 i);
        JassCameraField ConvertCameraField(Int32 i);
        JassBlendMode ConvertBlendMode(Int32 i);
        JassRarityControl ConvertRarityControl(Int32 i);
        JassTextureMapFlags ConvertTexMapFlags(Int32 i);
        JassFogState ConvertFogState(Int32 i);
        JassEffectType ConvertEffectType(Int32 i);
        JassVersion ConvertVersion(Int32 i);
        JassItemType ConvertItemType(Int32 i);
        JassAttackType ConvertAttackType(Int32 i);
        JassDamageType ConvertDamageType(Int32 i);
        JassWeaponType ConvertWeaponType(Int32 i);
        JassSoundType ConvertSoundType(Int32 i);
        JassPathingType ConvertPathingType(Int32 i);
        Int32 OrderId(String orderIdString);
        String OrderId2String(Int32 orderId);
        JassUnitId UnitId(String unitIdString);
        String UnitId2String(JassUnitId unitId);
        Int32 AbilityId(String abilityIdString);
        String AbilityId2String(Int32 abilityId);
        String GetObjectName(Int32 objectId);
        Single Deg2Rad(Single degrees);
        Single Rad2Deg(Single radians);
        Single Sin(Single radians);
        Single Cos(Single radians);
        Single Tan(Single radians);
        Single Asin(Single y);
        Single Acos(Single x);
        Single Atan(Single x);
        Single Atan2(Single y, Single x);
        Single SquareRoot(Single x);
        Single Pow(Single x, Single power);
        Single I2R(Int32 i);
        Int32 R2I(Single r);
        String I2S(Int32 i);
        String R2S(Single r);
        String R2SW(Single r, Int32 width, Int32 precision);
        Int32 S2I(String s);
        Single S2R(String s);
        Int32 GetHandleId(JassHandle h);
        String SubString(String source, Int32 start, Int32 end);
        Int32 StringLength(String s);
        String StringCase(String source, Boolean upper);
        Int32 StringHash(String s);
        String GetLocalizedString(String source);
        Int32 GetLocalizedHotkey(String source);
        void SetMapName(String name);
        void SetMapDescription(String description);
        void SetTeams(Int32 teamcount);
        void SetPlayers(Int32 playercount);
        void DefineStartLocation(Int32 whichStartLoc, Single x, Single y);
        void DefineStartLocationLoc(Int32 whichStartLoc, JassLocation whichLocation);
        void SetStartLocPrioCount(Int32 whichStartLoc, Int32 prioSlotCount);
        void SetStartLocPrio(Int32 whichStartLoc, Int32 prioSlotIndex, Int32 otherStartLocIndex, JassStartLocationPriority priority);
        Int32 GetStartLocPrioSlot(Int32 whichStartLoc, Int32 prioSlotIndex);
        JassStartLocationPriority GetStartLocPrio(Int32 whichStartLoc, Int32 prioSlotIndex);
        void SetGameTypeSupported(JassGameType whichGameType, Boolean value);
        void SetMapFlag(JassMapFlag whichMapFlag, Boolean value);
        void SetGamePlacement(JassPlacement whichPlacementType);
        void SetGameSpeed(JassGameSpeed whichspeed);
        void SetGameDifficulty(JassGameDifficulty whichdifficulty);
        void SetResourceDensity(JassMapDensity whichdensity);
        void SetCreatureDensity(JassMapDensity whichdensity);
        Int32 GetTeams();
        Int32 GetPlayers();
        Boolean IsGameTypeSupported(JassGameType whichGameType);
        JassGameType GetGameTypeSelected();
        Boolean IsMapFlagSet(JassMapFlag whichMapFlag);
        JassPlacement GetGamePlacement();
        JassGameSpeed GetGameSpeed();
        JassGameDifficulty GetGameDifficulty();
        JassMapDensity GetResourceDensity();
        JassMapDensity GetCreatureDensity();
        Single GetStartLocationX(Int32 whichStartLocation);
        Single GetStartLocationY(Int32 whichStartLocation);
        JassLocation GetStartLocationLoc(Int32 whichStartLocation);
        void SetPlayerTeam(JassPlayer whichPlayer, Int32 whichTeam);
        void SetPlayerStartLocation(JassPlayer whichPlayer, Int32 startLocIndex);
        void ForcePlayerStartLocation(JassPlayer whichPlayer, Int32 startLocIndex);
        void SetPlayerColor(JassPlayer whichPlayer, JassPlayerColor color);
        void SetPlayerAlliance(JassPlayer sourcePlayer, JassPlayer otherPlayer, JassAllianceType whichAllianceSetting, Boolean value);
        void SetPlayerTaxRate(JassPlayer sourcePlayer, JassPlayer otherPlayer, JassPlayerState whichResource, Int32 rate);
        void SetPlayerRacePreference(JassPlayer whichPlayer, JassRacePreference whichRacePreference);
        void SetPlayerRaceSelectable(JassPlayer whichPlayer, Boolean value);
        void SetPlayerController(JassPlayer whichPlayer, JassMapControl controlType);
        void SetPlayerName(JassPlayer whichPlayer, String name);
        void SetPlayerOnScoreScreen(JassPlayer whichPlayer, Boolean flag);
        Int32 GetPlayerTeam(JassPlayer whichPlayer);
        Int32 GetPlayerStartLocation(JassPlayer whichPlayer);
        JassPlayerColor GetPlayerColor(JassPlayer whichPlayer);
        Boolean GetPlayerSelectable(JassPlayer whichPlayer);
        JassMapControl GetPlayerController(JassPlayer whichPlayer);
        JassPlayerSlotState GetPlayerSlotState(JassPlayer whichPlayer);
        Int32 GetPlayerTaxRate(JassPlayer sourcePlayer, JassPlayer otherPlayer, JassPlayerState whichResource);
        Boolean IsPlayerRacePrefSet(JassPlayer whichPlayer, JassRacePreference pref);
        String GetPlayerName(JassPlayer whichPlayer);
        JassTimer CreateTimer();
        void DestroyTimer(JassTimer whichTimer);
        void TimerStart(JassTimer whichTimer, Single timeout, Boolean periodic, JassCode handlerFunc);
        Single TimerGetElapsed(JassTimer whichTimer);
        Single TimerGetRemaining(JassTimer whichTimer);
        Single TimerGetTimeout(JassTimer whichTimer);
        void PauseTimer(JassTimer whichTimer);
        void ResumeTimer(JassTimer whichTimer);
        JassTimer GetExpiredTimer();
        JassGroup CreateGroup();
        void DestroyGroup(JassGroup whichGroup);
        void GroupAddUnit(JassGroup whichGroup, JassUnit whichUnit);
        void GroupRemoveUnit(JassGroup whichGroup, JassUnit whichUnit);
        void GroupClear(JassGroup whichGroup);
        void GroupEnumUnitsOfType(JassGroup whichGroup, String unitname, JassBooleanExpression filter);
        void GroupEnumUnitsOfPlayer(JassGroup whichGroup, JassPlayer whichPlayer, JassBooleanExpression filter);
        void GroupEnumUnitsOfTypeCounted(JassGroup whichGroup, String unitname, JassBooleanExpression filter, Int32 countLimit);
        void GroupEnumUnitsInRect(JassGroup whichGroup, JassRect r, JassBooleanExpression filter);
        void GroupEnumUnitsInRectCounted(JassGroup whichGroup, JassRect r, JassBooleanExpression filter, Int32 countLimit);
        void GroupEnumUnitsInRange(JassGroup whichGroup, Single x, Single y, Single radius, JassBooleanExpression filter);
        void GroupEnumUnitsInRangeOfLoc(JassGroup whichGroup, JassLocation whichLocation, Single radius, JassBooleanExpression filter);
        void GroupEnumUnitsInRangeCounted(JassGroup whichGroup, Single x, Single y, Single radius, JassBooleanExpression filter, Int32 countLimit);
        void GroupEnumUnitsInRangeOfLocCounted(JassGroup whichGroup, JassLocation whichLocation, Single radius, JassBooleanExpression filter, Int32 countLimit);
        void GroupEnumUnitsSelected(JassGroup whichGroup, JassPlayer whichPlayer, JassBooleanExpression filter);
        Boolean GroupImmediateOrder(JassGroup whichGroup, String order);
        Boolean GroupImmediateOrderById(JassGroup whichGroup, Int32 order);
        Boolean GroupPointOrder(JassGroup whichGroup, String order, Single x, Single y);
        Boolean GroupPointOrderLoc(JassGroup whichGroup, String order, JassLocation whichLocation);
        Boolean GroupPointOrderById(JassGroup whichGroup, Int32 order, Single x, Single y);
        Boolean GroupPointOrderByIdLoc(JassGroup whichGroup, Int32 order, JassLocation whichLocation);
        Boolean GroupTargetOrder(JassGroup whichGroup, String order, JassWidget targetWidget);
        Boolean GroupTargetOrderById(JassGroup whichGroup, Int32 order, JassWidget targetWidget);
        void ForGroup(JassGroup whichGroup, JassCode callback);
        JassUnit FirstOfGroup(JassGroup whichGroup);
        JassForce CreateForce();
        void DestroyForce(JassForce whichForce);
        void ForceAddPlayer(JassForce whichForce, JassPlayer whichPlayer);
        void ForceRemovePlayer(JassForce whichForce, JassPlayer whichPlayer);
        void ForceClear(JassForce whichForce);
        void ForceEnumPlayers(JassForce whichForce, JassBooleanExpression filter);
        void ForceEnumPlayersCounted(JassForce whichForce, JassBooleanExpression filter, Int32 countLimit);
        void ForceEnumAllies(JassForce whichForce, JassPlayer whichPlayer, JassBooleanExpression filter);
        void ForceEnumEnemies(JassForce whichForce, JassPlayer whichPlayer, JassBooleanExpression filter);
        void ForForce(JassForce whichForce, JassCode callback);
        JassRect Rect(Single minx, Single miny, Single maxx, Single maxy);
        JassRect RectFromLoc(JassLocation min, JassLocation max);
        void RemoveRect(JassRect whichRect);
        void SetRect(JassRect whichRect, Single minx, Single miny, Single maxx, Single maxy);
        void SetRectFromLoc(JassRect whichRect, JassLocation min, JassLocation max);
        void MoveRectTo(JassRect whichRect, Single newCenterX, Single newCenterY);
        void MoveRectToLoc(JassRect whichRect, JassLocation newCenterLoc);
        Single GetRectCenterX(JassRect whichRect);
        Single GetRectCenterY(JassRect whichRect);
        Single GetRectMinX(JassRect whichRect);
        Single GetRectMinY(JassRect whichRect);
        Single GetRectMaxX(JassRect whichRect);
        Single GetRectMaxY(JassRect whichRect);
        JassRegion CreateRegion();
        void RemoveRegion(JassRegion whichRegion);
        void RegionAddRect(JassRegion whichRegion, JassRect r);
        void RegionClearRect(JassRegion whichRegion, JassRect r);
        void RegionAddCell(JassRegion whichRegion, Single x, Single y);
        void RegionAddCellAtLoc(JassRegion whichRegion, JassLocation whichLocation);
        void RegionClearCell(JassRegion whichRegion, Single x, Single y);
        void RegionClearCellAtLoc(JassRegion whichRegion, JassLocation whichLocation);
        JassLocation Location(Single x, Single y);
        void RemoveLocation(JassLocation whichLocation);
        void MoveLocation(JassLocation whichLocation, Single newX, Single newY);
        Single GetLocationX(JassLocation whichLocation);
        Single GetLocationY(JassLocation whichLocation);
        Single GetLocationZ(JassLocation whichLocation);
        Boolean IsUnitInRegion(JassRegion whichRegion, JassUnit whichUnit);
        Boolean IsPointInRegion(JassRegion whichRegion, Single x, Single y);
        Boolean IsLocationInRegion(JassRegion whichRegion, JassLocation whichLocation);
        JassRect GetWorldBounds();
        JassTrigger CreateTrigger();
        void DestroyTrigger(JassTrigger whichTrigger);
        void ResetTrigger(JassTrigger whichTrigger);
        void EnableTrigger(JassTrigger whichTrigger);
        void DisableTrigger(JassTrigger whichTrigger);
        Boolean IsTriggerEnabled(JassTrigger whichTrigger);
        void TriggerWaitOnSleeps(JassTrigger whichTrigger, Boolean flag);
        Boolean IsTriggerWaitOnSleeps(JassTrigger whichTrigger);
        JassUnit GetFilterUnit();
        JassUnit GetEnumUnit();
        JassDestructable GetFilterDestructable();
        JassDestructable GetEnumDestructable();
        JassItem GetFilterItem();
        JassItem GetEnumItem();
        JassPlayer GetFilterPlayer();
        JassPlayer GetEnumPlayer();
        JassTrigger GetTriggeringTrigger();
        JassEventIndex GetTriggerEventId();
        Int32 GetTriggerEvalCount(JassTrigger whichTrigger);
        Int32 GetTriggerExecCount(JassTrigger whichTrigger);
        void ExecuteFunc(String funcName);
        JassBooleanExpression And(JassBooleanExpression operandA, JassBooleanExpression operandB);
        JassBooleanExpression Or(JassBooleanExpression operandA, JassBooleanExpression operandB);
        JassBooleanExpression Not(JassBooleanExpression operand);
        JassConditionFunction Condition(JassCode func);
        void DestroyCondition(JassConditionFunction c);
        JassFilterFunction Filter(JassCode func);
        void DestroyFilter(JassFilterFunction f);
        void DestroyBoolExpr(JassBooleanExpression e);
        JassEvent TriggerRegisterVariableEvent(JassTrigger whichTrigger, String varName, JassLimitOp opcode, Single limitval);
        JassEvent TriggerRegisterTimerEvent(JassTrigger whichTrigger, Single timeout, Boolean periodic);
        JassEvent TriggerRegisterTimerExpireEvent(JassTrigger whichTrigger, JassTimer t);
        JassEvent TriggerRegisterGameStateEvent(JassTrigger whichTrigger, JassGameState whichState, JassLimitOp opcode, Single limitval);
        JassEvent TriggerRegisterDialogEvent(JassTrigger whichTrigger, JassDialog whichDialog);
        JassEvent TriggerRegisterDialogButtonEvent(JassTrigger whichTrigger, JassButton whichButton);
        JassGameState GetEventGameState();
        JassEvent TriggerRegisterGameEvent(JassTrigger whichTrigger, JassGameEvent whichGameEvent);
        JassPlayer GetWinningPlayer();
        JassEvent TriggerRegisterEnterRegion(JassTrigger whichTrigger, JassRegion whichRegion, JassBooleanExpression filter);
        JassRegion GetTriggeringRegion();
        JassUnit GetEnteringUnit();
        JassEvent TriggerRegisterLeaveRegion(JassTrigger whichTrigger, JassRegion whichRegion, JassBooleanExpression filter);
        JassUnit GetLeavingUnit();
        JassEvent TriggerRegisterTrackableHitEvent(JassTrigger whichTrigger, JassTrackable t);
        JassEvent TriggerRegisterTrackableTrackEvent(JassTrigger whichTrigger, JassTrackable t);
        JassTrackable GetTriggeringTrackable();
        JassButton GetClickedButton();
        JassDialog GetClickedDialog();
        Single GetTournamentFinishSoonTimeRemaining();
        Int32 GetTournamentFinishNowRule();
        JassPlayer GetTournamentFinishNowPlayer();
        Int32 GetTournamentScore(JassPlayer whichPlayer);
        String GetSaveBasicFilename();
        JassEvent TriggerRegisterPlayerEvent(JassTrigger whichTrigger, JassPlayer whichPlayer, JassPlayerEvent whichPlayerEvent);
        JassPlayer GetTriggerPlayer();
        JassEvent TriggerRegisterPlayerUnitEvent(JassTrigger whichTrigger, JassPlayer whichPlayer, JassPlayerUnitEvent whichPlayerUnitEvent, JassBooleanExpression filter);
        JassUnit GetLevelingUnit();
        JassUnit GetLearningUnit();
        Int32 GetLearnedSkill();
        Int32 GetLearnedSkillLevel();
        JassUnit GetRevivableUnit();
        JassUnit GetRevivingUnit();
        JassUnit GetAttacker();
        JassUnit GetRescuer();
        JassUnit GetDyingUnit();
        JassUnit GetKillingUnit();
        JassUnit GetDecayingUnit();
        JassUnit GetConstructingStructure();
        JassUnit GetCancelledStructure();
        JassUnit GetConstructedStructure();
        JassUnit GetResearchingUnit();
        Int32 GetResearched();
        Int32 GetTrainedUnitType();
        JassUnit GetTrainedUnit();
        JassUnit GetDetectedUnit();
        JassUnit GetSummoningUnit();
        JassUnit GetSummonedUnit();
        JassUnit GetTransportUnit();
        JassUnit GetLoadedUnit();
        JassUnit GetSellingUnit();
        JassUnit GetSoldUnit();
        JassUnit GetBuyingUnit();
        JassItem GetSoldItem();
        JassUnit GetChangingUnit();
        JassPlayer GetChangingUnitPrevOwner();
        JassUnit GetManipulatingUnit();
        JassItem GetManipulatedItem();
        JassUnit GetOrderedUnit();
        Int32 GetIssuedOrderId();
        Single GetOrderPointX();
        Single GetOrderPointY();
        JassLocation GetOrderPointLoc();
        JassWidget GetOrderTarget();
        JassDestructable GetOrderTargetDestructable();
        JassItem GetOrderTargetItem();
        JassUnit GetOrderTargetUnit();
        JassUnit GetSpellAbilityUnit();
        Int32 GetSpellAbilityId();
        JassAbility GetSpellAbility();
        JassLocation GetSpellTargetLoc();
        Single GetSpellTargetX();
        Single GetSpellTargetY();
        JassDestructable GetSpellTargetDestructable();
        JassItem GetSpellTargetItem();
        JassUnit GetSpellTargetUnit();
        JassEvent TriggerRegisterPlayerAllianceChange(JassTrigger whichTrigger, JassPlayer whichPlayer, JassAllianceType whichAlliance);
        JassEvent TriggerRegisterPlayerStateEvent(JassTrigger whichTrigger, JassPlayer whichPlayer, JassPlayerState whichState, JassLimitOp opcode, Single limitval);
        JassPlayerState GetEventPlayerState();
        JassEvent TriggerRegisterPlayerChatEvent(JassTrigger whichTrigger, JassPlayer whichPlayer, String chatMessageToDetect, Boolean exactMatchOnly);
        String GetEventPlayerChatString();
        String GetEventPlayerChatStringMatched();
        JassEvent TriggerRegisterDeathEvent(JassTrigger whichTrigger, JassWidget whichWidget);
        JassUnit GetTriggerUnit();
        JassEvent TriggerRegisterUnitStateEvent(JassTrigger whichTrigger, JassUnit whichUnit, JassUnitState whichState, JassLimitOp opcode, Single limitval);
        JassUnitState GetEventUnitState();
        JassEvent TriggerRegisterUnitEvent(JassTrigger whichTrigger, JassUnit whichUnit, JassUnitEvent whichEvent);
        Single GetEventDamage();
        JassUnit GetEventDamageSource();
        JassPlayer GetEventDetectingPlayer();
        JassEvent TriggerRegisterFilterUnitEvent(JassTrigger whichTrigger, JassUnit whichUnit, JassUnitEvent whichEvent, JassBooleanExpression filter);
        JassUnit GetEventTargetUnit();
        JassEvent TriggerRegisterUnitInRange(JassTrigger whichTrigger, JassUnit whichUnit, Single range, JassBooleanExpression filter);
        JassTriggerCondition TriggerAddCondition(JassTrigger whichTrigger, JassBooleanExpression condition);
        void TriggerRemoveCondition(JassTrigger whichTrigger, JassTriggerCondition whichCondition);
        void TriggerClearConditions(JassTrigger whichTrigger);
        JassTriggerAction TriggerAddAction(JassTrigger whichTrigger, JassCode actionFunc);
        void TriggerRemoveAction(JassTrigger whichTrigger, JassTriggerAction whichAction);
        void TriggerClearActions(JassTrigger whichTrigger);
        void TriggerSleepAction(Single timeout);
        void TriggerWaitForSound(JassSound s, Single offset);
        Boolean TriggerEvaluate(JassTrigger whichTrigger);
        void TriggerExecute(JassTrigger whichTrigger);
        void TriggerExecuteWait(JassTrigger whichTrigger);
        void TriggerSyncStart();
        void TriggerSyncReady();
        Single GetWidgetLife(JassWidget whichWidget);
        void SetWidgetLife(JassWidget whichWidget, Single newLife);
        Single GetWidgetX(JassWidget whichWidget);
        Single GetWidgetY(JassWidget whichWidget);
        JassWidget GetTriggerWidget();
        JassDestructable CreateDestructable(Int32 objectid, Single x, Single y, Single face, Single scale, Int32 variation);
        JassDestructable CreateDestructableZ(Int32 objectid, Single x, Single y, Single z, Single face, Single scale, Int32 variation);
        JassDestructable CreateDeadDestructable(Int32 objectid, Single x, Single y, Single face, Single scale, Int32 variation);
        JassDestructable CreateDeadDestructableZ(Int32 objectid, Single x, Single y, Single z, Single face, Single scale, Int32 variation);
        void RemoveDestructable(JassDestructable d);
        void KillDestructable(JassDestructable d);
        void SetDestructableInvulnerable(JassDestructable d, Boolean flag);
        Boolean IsDestructableInvulnerable(JassDestructable d);
        void EnumDestructablesInRect(JassRect r, JassBooleanExpression filter, JassCode actionFunc);
        Int32 GetDestructableTypeId(JassDestructable d);
        Single GetDestructableX(JassDestructable d);
        Single GetDestructableY(JassDestructable d);
        void SetDestructableLife(JassDestructable d, Single life);
        Single GetDestructableLife(JassDestructable d);
        void SetDestructableMaxLife(JassDestructable d, Single max);
        Single GetDestructableMaxLife(JassDestructable d);
        void DestructableRestoreLife(JassDestructable d, Single life, Boolean birth);
        void QueueDestructableAnimation(JassDestructable d, String whichAnimation);
        void SetDestructableAnimation(JassDestructable d, String whichAnimation);
        void SetDestructableAnimationSpeed(JassDestructable d, Single speedFactor);
        void ShowDestructable(JassDestructable d, Boolean flag);
        Single GetDestructableOccluderHeight(JassDestructable d);
        void SetDestructableOccluderHeight(JassDestructable d, Single height);
        String GetDestructableName(JassDestructable d);
        JassDestructable GetTriggerDestructable();
        JassItem CreateItem(Int32 itemid, Single x, Single y);
        void RemoveItem(JassItem whichItem);
        JassPlayer GetItemPlayer(JassItem whichItem);
        Int32 GetItemTypeId(JassItem i);
        Single GetItemX(JassItem i);
        Single GetItemY(JassItem i);
        void SetItemPosition(JassItem i, Single x, Single y);
        void SetItemDropOnDeath(JassItem whichItem, Boolean flag);
        void SetItemDroppable(JassItem i, Boolean flag);
        void SetItemPawnable(JassItem i, Boolean flag);
        void SetItemPlayer(JassItem whichItem, JassPlayer whichPlayer, Boolean changeColor);
        void SetItemInvulnerable(JassItem whichItem, Boolean flag);
        Boolean IsItemInvulnerable(JassItem whichItem);
        void SetItemVisible(JassItem whichItem, Boolean show);
        Boolean IsItemVisible(JassItem whichItem);
        Boolean IsItemOwned(JassItem whichItem);
        Boolean IsItemPowerup(JassItem whichItem);
        Boolean IsItemSellable(JassItem whichItem);
        Boolean IsItemPawnable(JassItem whichItem);
        Boolean IsItemIdPowerup(Int32 itemId);
        Boolean IsItemIdSellable(Int32 itemId);
        Boolean IsItemIdPawnable(Int32 itemId);
        void EnumItemsInRect(JassRect r, JassBooleanExpression filter, JassCode actionFunc);
        Int32 GetItemLevel(JassItem whichItem);
        JassItemType GetItemType(JassItem whichItem);
        void SetItemDropID(JassItem whichItem, JassUnitId unitId);
        String GetItemName(JassItem whichItem);
        Int32 GetItemCharges(JassItem whichItem);
        void SetItemCharges(JassItem whichItem, Int32 charges);
        Int32 GetItemUserData(JassItem whichItem);
        void SetItemUserData(JassItem whichItem, Int32 data);
        JassUnit CreateUnit(JassPlayer id, JassUnitId unitid, Single x, Single y, Single face);
        JassUnit CreateUnitByName(JassPlayer whichPlayer, String unitname, Single x, Single y, Single face);
        JassUnit CreateUnitAtLoc(JassPlayer id, JassUnitId unitid, JassLocation whichLocation, Single face);
        JassUnit CreateUnitAtLocByName(JassPlayer id, String unitname, JassLocation whichLocation, Single face);
        JassUnit CreateCorpse(JassPlayer whichPlayer, JassUnitId unitid, Single x, Single y, Single face);
        void KillUnit(JassUnit whichUnit);
        void RemoveUnit(JassUnit whichUnit);
        void ShowUnit(JassUnit whichUnit, Boolean show);
        void SetUnitState(JassUnit whichUnit, JassUnitState whichUnitState, Single newVal);
        void SetUnitX(JassUnit whichUnit, Single newX);
        void SetUnitY(JassUnit whichUnit, Single newY);
        void SetUnitPosition(JassUnit whichUnit, Single newX, Single newY);
        void SetUnitPositionLoc(JassUnit whichUnit, JassLocation whichLocation);
        void SetUnitFacing(JassUnit whichUnit, Single facingAngle);
        void SetUnitFacingTimed(JassUnit whichUnit, Single facingAngle, Single duration);
        void SetUnitMoveSpeed(JassUnit whichUnit, Single newSpeed);
        void SetUnitFlyHeight(JassUnit whichUnit, Single newHeight, Single rate);
        void SetUnitTurnSpeed(JassUnit whichUnit, Single newTurnSpeed);
        void SetUnitPropWindow(JassUnit whichUnit, Single newPropWindowAngle);
        void SetUnitAcquireRange(JassUnit whichUnit, Single newAcquireRange);
        void SetUnitCreepGuard(JassUnit whichUnit, Boolean creepGuard);
        Single GetUnitAcquireRange(JassUnit whichUnit);
        Single GetUnitTurnSpeed(JassUnit whichUnit);
        Single GetUnitPropWindow(JassUnit whichUnit);
        Single GetUnitFlyHeight(JassUnit whichUnit);
        Single GetUnitDefaultAcquireRange(JassUnit whichUnit);
        Single GetUnitDefaultTurnSpeed(JassUnit whichUnit);
        Single GetUnitDefaultPropWindow(JassUnit whichUnit);
        Single GetUnitDefaultFlyHeight(JassUnit whichUnit);
        void SetUnitOwner(JassUnit whichUnit, JassPlayer whichPlayer, Boolean changeColor);
        void SetUnitColor(JassUnit whichUnit, JassPlayerColor whichColor);
        void SetUnitScale(JassUnit whichUnit, Single scaleX, Single scaleY, Single scaleZ);
        void SetUnitTimeScale(JassUnit whichUnit, Single timeScale);
        void SetUnitBlendTime(JassUnit whichUnit, Single blendTime);
        void SetUnitVertexColor(JassUnit whichUnit, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void QueueUnitAnimation(JassUnit whichUnit, String whichAnimation);
        void SetUnitAnimation(JassUnit whichUnit, String whichAnimation);
        void SetUnitAnimationByIndex(JassUnit whichUnit, Int32 whichAnimation);
        void SetUnitAnimationWithRarity(JassUnit whichUnit, String whichAnimation, JassRarityControl rarity);
        void AddUnitAnimationProperties(JassUnit whichUnit, String animProperties, Boolean add);
        void SetUnitLookAt(JassUnit whichUnit, String whichBone, JassUnit lookAtTarget, Single offsetX, Single offsetY, Single offsetZ);
        void ResetUnitLookAt(JassUnit whichUnit);
        void SetUnitRescuable(JassUnit whichUnit, JassPlayer byWhichPlayer, Boolean flag);
        void SetUnitRescueRange(JassUnit whichUnit, Single range);
        void SetHeroStr(JassUnit whichHero, Int32 newStr, Boolean permanent);
        void SetHeroAgi(JassUnit whichHero, Int32 newAgi, Boolean permanent);
        void SetHeroInt(JassUnit whichHero, Int32 newInt, Boolean permanent);
        Int32 GetHeroStr(JassUnit whichHero, Boolean includeBonuses);
        Int32 GetHeroAgi(JassUnit whichHero, Boolean includeBonuses);
        Int32 GetHeroInt(JassUnit whichHero, Boolean includeBonuses);
        Boolean UnitStripHeroLevel(JassUnit whichHero, Int32 howManyLevels);
        Int32 GetHeroXP(JassUnit whichHero);
        void SetHeroXP(JassUnit whichHero, Int32 newXpVal, Boolean showEyeCandy);
        Int32 GetHeroSkillPoints(JassUnit whichHero);
        Boolean UnitModifySkillPoints(JassUnit whichHero, Int32 skillPointDelta);
        void AddHeroXP(JassUnit whichHero, Int32 xpToAdd, Boolean showEyeCandy);
        void SetHeroLevel(JassUnit whichHero, Int32 level, Boolean showEyeCandy);
        Int32 GetHeroLevel(JassUnit whichHero);
        Int32 GetUnitLevel(JassUnit whichUnit);
        String GetHeroProperName(JassUnit whichHero);
        void SuspendHeroXP(JassUnit whichHero, Boolean flag);
        Boolean IsSuspendedXP(JassUnit whichHero);
        void SelectHeroSkill(JassUnit whichHero, Int32 abilcode);
        Int32 GetUnitAbilityLevel(JassUnit whichUnit, Int32 abilcode);
        Int32 DecUnitAbilityLevel(JassUnit whichUnit, Int32 abilcode);
        Int32 IncUnitAbilityLevel(JassUnit whichUnit, Int32 abilcode);
        Int32 SetUnitAbilityLevel(JassUnit whichUnit, Int32 abilcode, Int32 level);
        Boolean ReviveHero(JassUnit whichHero, Single x, Single y, Boolean doEyecandy);
        Boolean ReviveHeroLoc(JassUnit whichHero, JassLocation loc, Boolean doEyecandy);
        void SetUnitExploded(JassUnit whichUnit, Boolean exploded);
        void SetUnitInvulnerable(JassUnit whichUnit, Boolean flag);
        void PauseUnit(JassUnit whichUnit, Boolean flag);
        Boolean IsUnitPaused(JassUnit whichHero);
        void SetUnitPathing(JassUnit whichUnit, Boolean flag);
        void ClearSelection();
        void SelectUnit(JassUnit whichUnit, Boolean flag);
        Int32 GetUnitPointValue(JassUnit whichUnit);
        Int32 GetUnitPointValueByType(Int32 unitType);
        Boolean UnitAddItem(JassUnit whichUnit, JassItem whichItem);
        JassItem UnitAddItemById(JassUnit whichUnit, Int32 itemId);
        Boolean UnitAddItemToSlotById(JassUnit whichUnit, Int32 itemId, Int32 itemSlot);
        void UnitRemoveItem(JassUnit whichUnit, JassItem whichItem);
        JassItem UnitRemoveItemFromSlot(JassUnit whichUnit, Int32 itemSlot);
        Boolean UnitHasItem(JassUnit whichUnit, JassItem whichItem);
        JassItem UnitItemInSlot(JassUnit whichUnit, Int32 itemSlot);
        Int32 UnitInventorySize(JassUnit whichUnit);
        Boolean UnitDropItemPoint(JassUnit whichUnit, JassItem whichItem, Single x, Single y);
        Boolean UnitDropItemSlot(JassUnit whichUnit, JassItem whichItem, Int32 slot);
        Boolean UnitDropItemTarget(JassUnit whichUnit, JassItem whichItem, JassWidget target);
        Boolean UnitUseItem(JassUnit whichUnit, JassItem whichItem);
        Boolean UnitUseItemPoint(JassUnit whichUnit, JassItem whichItem, Single x, Single y);
        Boolean UnitUseItemTarget(JassUnit whichUnit, JassItem whichItem, JassWidget target);
        Single GetUnitX(JassUnit whichUnit);
        Single GetUnitY(JassUnit whichUnit);
        JassLocation GetUnitLoc(JassUnit whichUnit);
        Single GetUnitFacing(JassUnit whichUnit);
        Single GetUnitMoveSpeed(JassUnit whichUnit);
        Single GetUnitDefaultMoveSpeed(JassUnit whichUnit);
        Single GetUnitState(JassUnit whichUnit, JassUnitState whichUnitState);
        JassPlayer GetOwningPlayer(JassUnit whichUnit);
        Int32 GetUnitTypeId(JassUnit whichUnit);
        JassRace GetUnitRace(JassUnit whichUnit);
        String GetUnitName(JassUnit whichUnit);
        Int32 GetUnitFoodUsed(JassUnit whichUnit);
        Int32 GetUnitFoodMade(JassUnit whichUnit);
        Int32 GetFoodMade(JassUnitId unitId);
        Int32 GetFoodUsed(JassUnitId unitId);
        void SetUnitUseFood(JassUnit whichUnit, Boolean useFood);
        JassLocation GetUnitRallyPoint(JassUnit whichUnit);
        JassUnit GetUnitRallyUnit(JassUnit whichUnit);
        JassDestructable GetUnitRallyDestructable(JassUnit whichUnit);
        Boolean IsUnitInGroup(JassUnit whichUnit, JassGroup whichGroup);
        Boolean IsUnitInForce(JassUnit whichUnit, JassForce whichForce);
        Boolean IsUnitOwnedByPlayer(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitAlly(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitEnemy(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitVisible(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitDetected(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitInvisible(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitFogged(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitMasked(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitSelected(JassUnit whichUnit, JassPlayer whichPlayer);
        Boolean IsUnitRace(JassUnit whichUnit, JassRace whichRace);
        Boolean IsUnitType(JassUnit whichUnit, JassUnitType whichUnitType);
        Boolean IsUnit(JassUnit whichUnit, JassUnit whichSpecifiedUnit);
        Boolean IsUnitInRange(JassUnit whichUnit, JassUnit otherUnit, Single distance);
        Boolean IsUnitInRangeXY(JassUnit whichUnit, Single x, Single y, Single distance);
        Boolean IsUnitInRangeLoc(JassUnit whichUnit, JassLocation whichLocation, Single distance);
        Boolean IsUnitHidden(JassUnit whichUnit);
        Boolean IsUnitIllusion(JassUnit whichUnit);
        Boolean IsUnitInTransport(JassUnit whichUnit, JassUnit whichTransport);
        Boolean IsUnitLoaded(JassUnit whichUnit);
        Boolean IsHeroUnitId(JassUnitId unitId);
        Boolean IsUnitIdType(JassUnitId unitId, JassUnitType whichUnitType);
        void UnitShareVision(JassUnit whichUnit, JassPlayer whichPlayer, Boolean share);
        void UnitSuspendDecay(JassUnit whichUnit, Boolean suspend);
        Boolean UnitAddType(JassUnit whichUnit, JassUnitType whichUnitType);
        Boolean UnitRemoveType(JassUnit whichUnit, JassUnitType whichUnitType);
        Boolean UnitAddAbility(JassUnit whichUnit, Int32 abilityId);
        Boolean UnitRemoveAbility(JassUnit whichUnit, Int32 abilityId);
        Boolean UnitMakeAbilityPermanent(JassUnit whichUnit, Boolean permanent, Int32 abilityId);
        void UnitRemoveBuffs(JassUnit whichUnit, Boolean removePositive, Boolean removeNegative);
        void UnitRemoveBuffsEx(JassUnit whichUnit, Boolean removePositive, Boolean removeNegative, Boolean magic, Boolean physical, Boolean timedLife, Boolean aura, Boolean autoDispel);
        Boolean UnitHasBuffsEx(JassUnit whichUnit, Boolean removePositive, Boolean removeNegative, Boolean magic, Boolean physical, Boolean timedLife, Boolean aura, Boolean autoDispel);
        Int32 UnitCountBuffsEx(JassUnit whichUnit, Boolean removePositive, Boolean removeNegative, Boolean magic, Boolean physical, Boolean timedLife, Boolean aura, Boolean autoDispel);
        void UnitAddSleep(JassUnit whichUnit, Boolean add);
        Boolean UnitCanSleep(JassUnit whichUnit);
        void UnitAddSleepPerm(JassUnit whichUnit, Boolean add);
        Boolean UnitCanSleepPerm(JassUnit whichUnit);
        Boolean UnitIsSleeping(JassUnit whichUnit);
        void UnitWakeUp(JassUnit whichUnit);
        void UnitApplyTimedLife(JassUnit whichUnit, Int32 buffId, Single duration);
        Boolean UnitIgnoreAlarm(JassUnit whichUnit, Boolean flag);
        Boolean UnitIgnoreAlarmToggled(JassUnit whichUnit);
        void UnitResetCooldown(JassUnit whichUnit);
        void UnitSetConstructionProgress(JassUnit whichUnit, Int32 constructionPercentage);
        void UnitSetUpgradeProgress(JassUnit whichUnit, Int32 upgradePercentage);
        void UnitPauseTimedLife(JassUnit whichUnit, Boolean flag);
        void UnitSetUsesAltIcon(JassUnit whichUnit, Boolean flag);
        Boolean UnitDamagePoint(JassUnit whichUnit, Single delay, Single radius, Single x, Single y, Single amount, Boolean attack, Boolean ranged, JassAttackType attackType, JassDamageType damageType, JassWeaponType weaponType);
        Boolean UnitDamageTarget(JassUnit whichUnit, JassWidget target, Single amount, Boolean attack, Boolean ranged, JassAttackType attackType, JassDamageType damageType, JassWeaponType weaponType);
        Boolean IssueImmediateOrder(JassUnit whichUnit, String order);
        Boolean IssueImmediateOrderById(JassUnit whichUnit, Int32 order);
        Boolean IssuePointOrder(JassUnit whichUnit, String order, Single x, Single y);
        Boolean IssuePointOrderLoc(JassUnit whichUnit, String order, JassLocation whichLocation);
        Boolean IssuePointOrderById(JassUnit whichUnit, Int32 order, Single x, Single y);
        Boolean IssuePointOrderByIdLoc(JassUnit whichUnit, Int32 order, JassLocation whichLocation);
        Boolean IssueTargetOrder(JassUnit whichUnit, String order, JassWidget targetWidget);
        Boolean IssueTargetOrderById(JassUnit whichUnit, Int32 order, JassWidget targetWidget);
        Boolean IssueInstantPointOrder(JassUnit whichUnit, String order, Single x, Single y, JassWidget instantTargetWidget);
        Boolean IssueInstantPointOrderById(JassUnit whichUnit, Int32 order, Single x, Single y, JassWidget instantTargetWidget);
        Boolean IssueInstantTargetOrder(JassUnit whichUnit, String order, JassWidget targetWidget, JassWidget instantTargetWidget);
        Boolean IssueInstantTargetOrderById(JassUnit whichUnit, Int32 order, JassWidget targetWidget, JassWidget instantTargetWidget);
        Boolean IssueBuildOrder(JassUnit whichPeon, String unitToBuild, Single x, Single y);
        Boolean IssueBuildOrderById(JassUnit whichPeon, JassUnitId unitId, Single x, Single y);
        Boolean IssueNeutralImmediateOrder(JassPlayer forWhichPlayer, JassUnit neutralStructure, String unitToBuild);
        Boolean IssueNeutralImmediateOrderById(JassPlayer forWhichPlayer, JassUnit neutralStructure, JassUnitId unitId);
        Boolean IssueNeutralPointOrder(JassPlayer forWhichPlayer, JassUnit neutralStructure, String unitToBuild, Single x, Single y);
        Boolean IssueNeutralPointOrderById(JassPlayer forWhichPlayer, JassUnit neutralStructure, JassUnitId unitId, Single x, Single y);
        Boolean IssueNeutralTargetOrder(JassPlayer forWhichPlayer, JassUnit neutralStructure, String unitToBuild, JassWidget target);
        Boolean IssueNeutralTargetOrderById(JassPlayer forWhichPlayer, JassUnit neutralStructure, JassUnitId unitId, JassWidget target);
        Int32 GetUnitCurrentOrder(JassUnit whichUnit);
        void SetResourceAmount(JassUnit whichUnit, Int32 amount);
        void AddResourceAmount(JassUnit whichUnit, Int32 amount);
        Int32 GetResourceAmount(JassUnit whichUnit);
        Single WaygateGetDestinationX(JassUnit waygate);
        Single WaygateGetDestinationY(JassUnit waygate);
        void WaygateSetDestination(JassUnit waygate, Single x, Single y);
        void WaygateActivate(JassUnit waygate, Boolean activate);
        Boolean WaygateIsActive(JassUnit waygate);
        void AddItemToAllStock(Int32 itemId, Int32 currentStock, Int32 stockMax);
        void AddItemToStock(JassUnit whichUnit, Int32 itemId, Int32 currentStock, Int32 stockMax);
        void AddUnitToAllStock(JassUnitId unitId, Int32 currentStock, Int32 stockMax);
        void AddUnitToStock(JassUnit whichUnit, JassUnitId unitId, Int32 currentStock, Int32 stockMax);
        void RemoveItemFromAllStock(Int32 itemId);
        void RemoveItemFromStock(JassUnit whichUnit, Int32 itemId);
        void RemoveUnitFromAllStock(JassUnitId unitId);
        void RemoveUnitFromStock(JassUnit whichUnit, JassUnitId unitId);
        void SetAllItemTypeSlots(Int32 slots);
        void SetAllUnitTypeSlots(Int32 slots);
        void SetItemTypeSlots(JassUnit whichUnit, Int32 slots);
        void SetUnitTypeSlots(JassUnit whichUnit, Int32 slots);
        Int32 GetUnitUserData(JassUnit whichUnit);
        void SetUnitUserData(JassUnit whichUnit, Int32 data);
        JassPlayer Player(Int32 number);
        JassPlayer GetLocalPlayer();
        Boolean IsPlayerAlly(JassPlayer whichPlayer, JassPlayer otherPlayer);
        Boolean IsPlayerEnemy(JassPlayer whichPlayer, JassPlayer otherPlayer);
        Boolean IsPlayerInForce(JassPlayer whichPlayer, JassForce whichForce);
        Boolean IsPlayerObserver(JassPlayer whichPlayer);
        Boolean IsVisibleToPlayer(Single x, Single y, JassPlayer whichPlayer);
        Boolean IsLocationVisibleToPlayer(JassLocation whichLocation, JassPlayer whichPlayer);
        Boolean IsFoggedToPlayer(Single x, Single y, JassPlayer whichPlayer);
        Boolean IsLocationFoggedToPlayer(JassLocation whichLocation, JassPlayer whichPlayer);
        Boolean IsMaskedToPlayer(Single x, Single y, JassPlayer whichPlayer);
        Boolean IsLocationMaskedToPlayer(JassLocation whichLocation, JassPlayer whichPlayer);
        JassRace GetPlayerRace(JassPlayer whichPlayer);
        Int32 GetPlayerId(JassPlayer whichPlayer);
        Int32 GetPlayerUnitCount(JassPlayer whichPlayer, Boolean includeIncomplete);
        Int32 GetPlayerTypedUnitCount(JassPlayer whichPlayer, String unitName, Boolean includeIncomplete, Boolean includeUpgrades);
        Int32 GetPlayerStructureCount(JassPlayer whichPlayer, Boolean includeIncomplete);
        Int32 GetPlayerState(JassPlayer whichPlayer, JassPlayerState whichPlayerState);
        Int32 GetPlayerScore(JassPlayer whichPlayer, JassPlayerScore whichPlayerScore);
        Boolean GetPlayerAlliance(JassPlayer sourcePlayer, JassPlayer otherPlayer, JassAllianceType whichAllianceSetting);
        Single GetPlayerHandicap(JassPlayer whichPlayer);
        Single GetPlayerHandicapXP(JassPlayer whichPlayer);
        void SetPlayerHandicap(JassPlayer whichPlayer, Single handicap);
        void SetPlayerHandicapXP(JassPlayer whichPlayer, Single handicap);
        void SetPlayerTechMaxAllowed(JassPlayer whichPlayer, Int32 techid, Int32 maximum);
        Int32 GetPlayerTechMaxAllowed(JassPlayer whichPlayer, Int32 techid);
        void AddPlayerTechResearched(JassPlayer whichPlayer, Int32 techid, Int32 levels);
        void SetPlayerTechResearched(JassPlayer whichPlayer, Int32 techid, Int32 setToLevel);
        Boolean GetPlayerTechResearched(JassPlayer whichPlayer, Int32 techid, Boolean specificonly);
        Int32 GetPlayerTechCount(JassPlayer whichPlayer, Int32 techid, Boolean specificonly);
        void SetPlayerUnitsOwner(JassPlayer whichPlayer, Int32 newOwner);
        void CripplePlayer(JassPlayer whichPlayer, JassForce toWhichPlayers, Boolean flag);
        void SetPlayerAbilityAvailable(JassPlayer whichPlayer, Int32 abilid, Boolean avail);
        void SetPlayerState(JassPlayer whichPlayer, JassPlayerState whichPlayerState, Int32 value);
        void RemovePlayer(JassPlayer whichPlayer, JassPlayerGameResult gameResult);
        void CachePlayerHeroData(JassPlayer whichPlayer);
        void SetFogStateRect(JassPlayer forWhichPlayer, JassFogState whichState, JassRect where, Boolean useSharedVision);
        void SetFogStateRadius(JassPlayer forWhichPlayer, JassFogState whichState, Single centerx, Single centerY, Single radius, Boolean useSharedVision);
        void SetFogStateRadiusLoc(JassPlayer forWhichPlayer, JassFogState whichState, JassLocation center, Single radius, Boolean useSharedVision);
        void FogMaskEnable(Boolean enable);
        Boolean IsFogMaskEnabled();
        void FogEnable(Boolean enable);
        Boolean IsFogEnabled();
        JassFogModifier CreateFogModifierRect(JassPlayer forWhichPlayer, JassFogState whichState, JassRect where, Boolean useSharedVision, Boolean afterUnits);
        JassFogModifier CreateFogModifierRadius(JassPlayer forWhichPlayer, JassFogState whichState, Single centerx, Single centerY, Single radius, Boolean useSharedVision, Boolean afterUnits);
        JassFogModifier CreateFogModifierRadiusLoc(JassPlayer forWhichPlayer, JassFogState whichState, JassLocation center, Single radius, Boolean useSharedVision, Boolean afterUnits);
        void DestroyFogModifier(JassFogModifier whichFogModifier);
        void FogModifierStart(JassFogModifier whichFogModifier);
        void FogModifierStop(JassFogModifier whichFogModifier);
        JassVersion VersionGet();
        Boolean VersionCompatible(JassVersion whichVersion);
        Boolean VersionSupported(JassVersion whichVersion);
        void EndGame(Boolean doScoreScreen);
        void ChangeLevel(String newLevel, Boolean doScoreScreen);
        void RestartGame(Boolean doScoreScreen);
        void ReloadGame();
        void SetCampaignMenuRace(JassRace r);
        void SetCampaignMenuRaceEx(Int32 campaignIndex);
        void ForceCampaignSelectScreen();
        void LoadGame(String saveFileName, Boolean doScoreScreen);
        void SaveGame(String saveFileName);
        Boolean RenameSaveDirectory(String sourceDirName, String destDirName);
        Boolean RemoveSaveDirectory(String sourceDirName);
        Boolean CopySaveGame(String sourceSaveName, String destSaveName);
        Boolean SaveGameExists(String saveName);
        void SyncSelections();
        void SetFloatGameState(JassFGameState whichFloatGameState, Single value);
        Single GetFloatGameState(JassFGameState whichFloatGameState);
        void SetIntegerGameState(JassIGameState whichIntegerGameState, Int32 value);
        Int32 GetIntegerGameState(JassIGameState whichIntegerGameState);
        void SetTutorialCleared(Boolean cleared);
        void SetMissionAvailable(Int32 campaignNumber, Int32 missionNumber, Boolean available);
        void SetCampaignAvailable(Int32 campaignNumber, Boolean available);
        void SetOpCinematicAvailable(Int32 campaignNumber, Boolean available);
        void SetEdCinematicAvailable(Int32 campaignNumber, Boolean available);
        JassGameDifficulty GetDefaultDifficulty();
        void SetDefaultDifficulty(JassGameDifficulty g);
        void SetCustomCampaignButtonVisible(Int32 whichButton, Boolean visible);
        Boolean GetCustomCampaignButtonVisible(Int32 whichButton);
        void DoNotSaveReplay();
        JassDialog DialogCreate();
        void DialogDestroy(JassDialog whichDialog);
        void DialogClear(JassDialog whichDialog);
        void DialogSetMessage(JassDialog whichDialog, String messageText);
        JassButton DialogAddButton(JassDialog whichDialog, String buttonText, Int32 hotkey);
        JassButton DialogAddQuitButton(JassDialog whichDialog, Boolean doScoreScreen, String buttonText, Int32 hotkey);
        void DialogDisplay(JassPlayer whichPlayer, JassDialog whichDialog, Boolean flag);
        Boolean ReloadGameCachesFromDisk();
        JassGameCache InitGameCache(String campaignFile);
        Boolean SaveGameCache(JassGameCache whichCache);
        void StoreInteger(JassGameCache cache, String missionKey, String key, Int32 value);
        void StoreReal(JassGameCache cache, String missionKey, String key, Single value);
        void StoreBoolean(JassGameCache cache, String missionKey, String key, Boolean value);
        Boolean StoreUnit(JassGameCache cache, String missionKey, String key, JassUnit whichUnit);
        Boolean StoreString(JassGameCache cache, String missionKey, String key, String value);
        void SyncStoredInteger(JassGameCache cache, String missionKey, String key);
        void SyncStoredReal(JassGameCache cache, String missionKey, String key);
        void SyncStoredBoolean(JassGameCache cache, String missionKey, String key);
        void SyncStoredUnit(JassGameCache cache, String missionKey, String key);
        void SyncStoredString(JassGameCache cache, String missionKey, String key);
        Boolean HaveStoredInteger(JassGameCache cache, String missionKey, String key);
        Boolean HaveStoredReal(JassGameCache cache, String missionKey, String key);
        Boolean HaveStoredBoolean(JassGameCache cache, String missionKey, String key);
        Boolean HaveStoredUnit(JassGameCache cache, String missionKey, String key);
        Boolean HaveStoredString(JassGameCache cache, String missionKey, String key);
        void FlushGameCache(JassGameCache cache);
        void FlushStoredMission(JassGameCache cache, String missionKey);
        void FlushStoredInteger(JassGameCache cache, String missionKey, String key);
        void FlushStoredReal(JassGameCache cache, String missionKey, String key);
        void FlushStoredBoolean(JassGameCache cache, String missionKey, String key);
        void FlushStoredUnit(JassGameCache cache, String missionKey, String key);
        void FlushStoredString(JassGameCache cache, String missionKey, String key);
        Int32 GetStoredInteger(JassGameCache cache, String missionKey, String key);
        Single GetStoredReal(JassGameCache cache, String missionKey, String key);
        Boolean GetStoredBoolean(JassGameCache cache, String missionKey, String key);
        String GetStoredString(JassGameCache cache, String missionKey, String key);
        JassUnit RestoreUnit(JassGameCache cache, String missionKey, String key, JassPlayer forWhichPlayer, Single x, Single y, Single facing);
        JassHashTable InitHashtable();
        void SaveInteger(JassHashTable table, Int32 parentKey, Int32 childKey, Int32 value);
        void SaveReal(JassHashTable table, Int32 parentKey, Int32 childKey, Single value);
        void SaveBoolean(JassHashTable table, Int32 parentKey, Int32 childKey, Boolean value);
        Boolean SaveStr(JassHashTable table, Int32 parentKey, Int32 childKey, String value);
        Boolean SavePlayerHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassPlayer whichPlayer);
        Boolean SaveWidgetHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassWidget whichWidget);
        Boolean SaveDestructableHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassDestructable whichDestructable);
        Boolean SaveItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassItem whichItem);
        Boolean SaveUnitHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassUnit whichUnit);
        Boolean SaveAbilityHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassAbility whichAbility);
        Boolean SaveTimerHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTimer whichTimer);
        Boolean SaveTriggerHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTrigger whichTrigger);
        Boolean SaveTriggerConditionHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTriggerCondition whichTriggercondition);
        Boolean SaveTriggerActionHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTriggerAction whichTriggeraction);
        Boolean SaveTriggerEventHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassEvent whichEvent);
        Boolean SaveForceHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassForce whichForce);
        Boolean SaveGroupHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassGroup whichGroup);
        Boolean SaveLocationHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassLocation whichLocation);
        Boolean SaveRectHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassRect whichRect);
        Boolean SaveBooleanExprHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassBooleanExpression whichBoolexpr);
        Boolean SaveSoundHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassSound whichSound);
        Boolean SaveEffectHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassEffect whichEffect);
        Boolean SaveUnitPoolHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassUnitPool whichUnitpool);
        Boolean SaveItemPoolHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassItemPool whichItempool);
        Boolean SaveQuestHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassQuest whichQuest);
        Boolean SaveQuestItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassQuestItem whichQuestitem);
        Boolean SaveDefeatConditionHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassDefeatCondition whichDefeatcondition);
        Boolean SaveTimerDialogHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTimerDialog whichTimerdialog);
        Boolean SaveLeaderboardHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassLeaderboard whichLeaderboard);
        Boolean SaveMultiboardHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassMultiboard whichMultiboard);
        Boolean SaveMultiboardItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassMultiboardItem whichMultiboarditem);
        Boolean SaveTrackableHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTrackable whichTrackable);
        Boolean SaveDialogHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassDialog whichDialog);
        Boolean SaveButtonHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassButton whichButton);
        Boolean SaveTextTagHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassTextTag whichTexttag);
        Boolean SaveLightningHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassLightning whichLightning);
        Boolean SaveImageHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassImage whichImage);
        Boolean SaveUbersplatHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassUberSplat whichUbersplat);
        Boolean SaveRegionHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassRegion whichRegion);
        Boolean SaveFogStateHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassFogState whichFogState);
        Boolean SaveFogModifierHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassFogModifier whichFogModifier);
        Boolean SaveAgentHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassAgent whichAgent);
        Boolean SaveHashtableHandle(JassHashTable table, Int32 parentKey, Int32 childKey, JassHashTable whichHashtable);
        Int32 LoadInteger(JassHashTable table, Int32 parentKey, Int32 childKey);
        Single LoadReal(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean LoadBoolean(JassHashTable table, Int32 parentKey, Int32 childKey);
        String LoadStr(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassPlayer LoadPlayerHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassWidget LoadWidgetHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassDestructable LoadDestructableHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassItem LoadItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassUnit LoadUnitHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassAbility LoadAbilityHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTimer LoadTimerHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTrigger LoadTriggerHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTriggerCondition LoadTriggerConditionHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTriggerAction LoadTriggerActionHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassEvent LoadTriggerEventHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassForce LoadForceHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassGroup LoadGroupHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassLocation LoadLocationHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassRect LoadRectHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassBooleanExpression LoadBooleanExprHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassSound LoadSoundHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassEffect LoadEffectHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassUnitPool LoadUnitPoolHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassItemPool LoadItemPoolHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassQuest LoadQuestHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassQuestItem LoadQuestItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassDefeatCondition LoadDefeatConditionHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTimerDialog LoadTimerDialogHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassLeaderboard LoadLeaderboardHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassMultiboard LoadMultiboardHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassMultiboardItem LoadMultiboardItemHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTrackable LoadTrackableHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassDialog LoadDialogHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassButton LoadButtonHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassTextTag LoadTextTagHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassLightning LoadLightningHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassImage LoadImageHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassUberSplat LoadUbersplatHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassRegion LoadRegionHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassFogState LoadFogStateHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassFogModifier LoadFogModifierHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        JassHashTable LoadHashtableHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean HaveSavedInteger(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean HaveSavedReal(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean HaveSavedBoolean(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean HaveSavedString(JassHashTable table, Int32 parentKey, Int32 childKey);
        Boolean HaveSavedHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        void RemoveSavedInteger(JassHashTable table, Int32 parentKey, Int32 childKey);
        void RemoveSavedReal(JassHashTable table, Int32 parentKey, Int32 childKey);
        void RemoveSavedBoolean(JassHashTable table, Int32 parentKey, Int32 childKey);
        void RemoveSavedString(JassHashTable table, Int32 parentKey, Int32 childKey);
        void RemoveSavedHandle(JassHashTable table, Int32 parentKey, Int32 childKey);
        void FlushParentHashtable(JassHashTable table);
        void FlushChildHashtable(JassHashTable table, Int32 parentKey);
        Int32 GetRandomInt(Int32 lowBound, Int32 highBound);
        Single GetRandomReal(Single lowBound, Single highBound);
        JassUnitPool CreateUnitPool();
        void DestroyUnitPool(JassUnitPool whichPool);
        void UnitPoolAddUnitType(JassUnitPool whichPool, JassUnitId unitId, Single weight);
        void UnitPoolRemoveUnitType(JassUnitPool whichPool, JassUnitId unitId);
        JassUnit PlaceRandomUnit(JassUnitPool whichPool, JassPlayer forWhichPlayer, Single x, Single y, Single facing);
        JassItemPool CreateItemPool();
        void DestroyItemPool(JassItemPool whichItemPool);
        void ItemPoolAddItemType(JassItemPool whichItemPool, Int32 itemId, Single weight);
        void ItemPoolRemoveItemType(JassItemPool whichItemPool, Int32 itemId);
        JassItem PlaceRandomItem(JassItemPool whichItemPool, Single x, Single y);
        Int32 ChooseRandomCreep(Int32 level);
        Int32 ChooseRandomNPBuilding();
        Int32 ChooseRandomItem(Int32 level);
        Int32 ChooseRandomItemEx(JassItemType whichType, Int32 level);
        void SetRandomSeed(Int32 seed);
        void SetTerrainFog(Single a, Single b, Single c, Single d, Single e);
        void ResetTerrainFog();
        void SetUnitFog(Single a, Single b, Single c, Single d, Single e);
        void SetTerrainFogEx(Int32 style, Single zstart, Single zend, Single density, Single red, Single green, Single blue);
        void DisplayTextToPlayer(JassPlayer toPlayer, Single x, Single y, String message);
        void DisplayTimedTextToPlayer(JassPlayer toPlayer, Single x, Single y, Single duration, String message);
        void DisplayTimedTextFromPlayer(JassPlayer toPlayer, Single x, Single y, Single duration, String message);
        void ClearTextMessages();
        void SetDayNightModels(String terrainDNCFile, String unitDNCFile);
        void SetSkyModel(String skyModelFile);
        void EnableUserControl(Boolean b);
        void EnableUserUI(Boolean b);
        void SuspendTimeOfDay(Boolean b);
        void SetTimeOfDayScale(Single r);
        Single GetTimeOfDayScale();
        void ShowInterface(Boolean flag, Single fadeDuration);
        void PauseGame(Boolean flag);
        void UnitAddIndicator(JassUnit whichUnit, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void AddIndicator(JassWidget whichWidget, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void PingMinimap(Single x, Single y, Single duration);
        void PingMinimapEx(Single x, Single y, Single duration, Int32 red, Int32 green, Int32 blue, Boolean extraEffects);
        void EnableOcclusion(Boolean flag);
        void SetIntroShotText(String introText);
        void SetIntroShotModel(String introModelPath);
        void EnableWorldFogBoundary(Boolean b);
        void PlayModelCinematic(String modelName);
        void PlayCinematic(String movieName);
        void ForceUIKey(String key);
        void ForceUICancel();
        void DisplayLoadDialog();
        void SetAltMinimapIcon(String iconPath);
        void DisableRestartMission(Boolean flag);
        JassTextTag CreateTextTag();
        void DestroyTextTag(JassTextTag t);
        void SetTextTagText(JassTextTag t, String s, Single height);
        void SetTextTagPos(JassTextTag t, Single x, Single y, Single heightOffset);
        void SetTextTagPosUnit(JassTextTag t, JassUnit whichUnit, Single heightOffset);
        void SetTextTagColor(JassTextTag t, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void SetTextTagVelocity(JassTextTag t, Single xvel, Single yvel);
        void SetTextTagVisibility(JassTextTag t, Boolean flag);
        void SetTextTagSuspended(JassTextTag t, Boolean flag);
        void SetTextTagPermanent(JassTextTag t, Boolean flag);
        void SetTextTagAge(JassTextTag t, Single age);
        void SetTextTagLifespan(JassTextTag t, Single lifespan);
        void SetTextTagFadepoint(JassTextTag t, Single fadepoint);
        void SetReservedLocalHeroButtons(Int32 reserved);
        Int32 GetAllyColorFilterState();
        void SetAllyColorFilterState(Int32 state);
        Boolean GetCreepCampFilterState();
        void SetCreepCampFilterState(Boolean state);
        void EnableMinimapFilterButtons(Boolean enableAlly, Boolean enableCreep);
        void EnableDragSelect(Boolean state, Boolean ui);
        void EnablePreSelect(Boolean state, Boolean ui);
        void EnableSelect(Boolean state, Boolean ui);
        JassTrackable CreateTrackable(String trackableModelPath, Single x, Single y, Single facing);
        JassQuest CreateQuest();
        void DestroyQuest(JassQuest whichQuest);
        void QuestSetTitle(JassQuest whichQuest, String title);
        void QuestSetDescription(JassQuest whichQuest, String description);
        void QuestSetIconPath(JassQuest whichQuest, String iconPath);
        void QuestSetRequired(JassQuest whichQuest, Boolean required);
        void QuestSetCompleted(JassQuest whichQuest, Boolean completed);
        void QuestSetDiscovered(JassQuest whichQuest, Boolean discovered);
        void QuestSetFailed(JassQuest whichQuest, Boolean failed);
        void QuestSetEnabled(JassQuest whichQuest, Boolean enabled);
        Boolean IsQuestRequired(JassQuest whichQuest);
        Boolean IsQuestCompleted(JassQuest whichQuest);
        Boolean IsQuestDiscovered(JassQuest whichQuest);
        Boolean IsQuestFailed(JassQuest whichQuest);
        Boolean IsQuestEnabled(JassQuest whichQuest);
        JassQuestItem QuestCreateItem(JassQuest whichQuest);
        void QuestItemSetDescription(JassQuestItem whichQuestItem, String description);
        void QuestItemSetCompleted(JassQuestItem whichQuestItem, Boolean completed);
        Boolean IsQuestItemCompleted(JassQuestItem whichQuestItem);
        JassDefeatCondition CreateDefeatCondition();
        void DestroyDefeatCondition(JassDefeatCondition whichCondition);
        void DefeatConditionSetDescription(JassDefeatCondition whichCondition, String description);
        void FlashQuestDialogButton();
        void ForceQuestDialogUpdate();
        JassTimerDialog CreateTimerDialog(JassTimer t);
        void DestroyTimerDialog(JassTimerDialog whichDialog);
        void TimerDialogSetTitle(JassTimerDialog whichDialog, String title);
        void TimerDialogSetTitleColor(JassTimerDialog whichDialog, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void TimerDialogSetTimeColor(JassTimerDialog whichDialog, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void TimerDialogSetSpeed(JassTimerDialog whichDialog, Single speedMultFactor);
        void TimerDialogDisplay(JassTimerDialog whichDialog, Boolean display);
        Boolean IsTimerDialogDisplayed(JassTimerDialog whichDialog);
        void TimerDialogSetRealTimeRemaining(JassTimerDialog whichDialog, Single timeRemaining);
        JassLeaderboard CreateLeaderboard();
        void DestroyLeaderboard(JassLeaderboard lb);
        void LeaderboardDisplay(JassLeaderboard lb, Boolean show);
        Boolean IsLeaderboardDisplayed(JassLeaderboard lb);
        Int32 LeaderboardGetItemCount(JassLeaderboard lb);
        void LeaderboardSetSizeByItemCount(JassLeaderboard lb, Int32 count);
        void LeaderboardAddItem(JassLeaderboard lb, String label, Int32 value, JassPlayer p);
        void LeaderboardRemoveItem(JassLeaderboard lb, Int32 index);
        void LeaderboardRemovePlayerItem(JassLeaderboard lb, JassPlayer p);
        void LeaderboardClear(JassLeaderboard lb);
        void LeaderboardSortItemsByValue(JassLeaderboard lb, Boolean ascending);
        void LeaderboardSortItemsByPlayer(JassLeaderboard lb, Boolean ascending);
        void LeaderboardSortItemsByLabel(JassLeaderboard lb, Boolean ascending);
        Boolean LeaderboardHasPlayerItem(JassLeaderboard lb, JassPlayer p);
        Int32 LeaderboardGetPlayerIndex(JassLeaderboard lb, JassPlayer p);
        void LeaderboardSetLabel(JassLeaderboard lb, String label);
        String LeaderboardGetLabelText(JassLeaderboard lb);
        void PlayerSetLeaderboard(JassPlayer toPlayer, JassLeaderboard lb);
        JassLeaderboard PlayerGetLeaderboard(JassPlayer toPlayer);
        void LeaderboardSetLabelColor(JassLeaderboard lb, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void LeaderboardSetValueColor(JassLeaderboard lb, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void LeaderboardSetStyle(JassLeaderboard lb, Boolean showLabel, Boolean showNames, Boolean showValues, Boolean showIcons);
        void LeaderboardSetItemValue(JassLeaderboard lb, Int32 whichItem, Int32 val);
        void LeaderboardSetItemLabel(JassLeaderboard lb, Int32 whichItem, String val);
        void LeaderboardSetItemStyle(JassLeaderboard lb, Int32 whichItem, Boolean showLabel, Boolean showValue, Boolean showIcon);
        void LeaderboardSetItemLabelColor(JassLeaderboard lb, Int32 whichItem, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void LeaderboardSetItemValueColor(JassLeaderboard lb, Int32 whichItem, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        JassMultiboard CreateMultiboard();
        void DestroyMultiboard(JassMultiboard lb);
        void MultiboardDisplay(JassMultiboard lb, Boolean show);
        Boolean IsMultiboardDisplayed(JassMultiboard lb);
        void MultiboardMinimize(JassMultiboard lb, Boolean minimize);
        Boolean IsMultiboardMinimized(JassMultiboard lb);
        void MultiboardClear(JassMultiboard lb);
        void MultiboardSetTitleText(JassMultiboard lb, String label);
        String MultiboardGetTitleText(JassMultiboard lb);
        void MultiboardSetTitleTextColor(JassMultiboard lb, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        Int32 MultiboardGetRowCount(JassMultiboard lb);
        Int32 MultiboardGetColumnCount(JassMultiboard lb);
        void MultiboardSetColumnCount(JassMultiboard lb, Int32 count);
        void MultiboardSetRowCount(JassMultiboard lb, Int32 count);
        void MultiboardSetItemsStyle(JassMultiboard lb, Boolean showValues, Boolean showIcons);
        void MultiboardSetItemsValue(JassMultiboard lb, String value);
        void MultiboardSetItemsValueColor(JassMultiboard lb, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void MultiboardSetItemsWidth(JassMultiboard lb, Single width);
        void MultiboardSetItemsIcon(JassMultiboard lb, String iconPath);
        JassMultiboardItem MultiboardGetItem(JassMultiboard lb, Int32 row, Int32 column);
        void MultiboardReleaseItem(JassMultiboardItem mbi);
        void MultiboardSetItemStyle(JassMultiboardItem mbi, Boolean showValue, Boolean showIcon);
        void MultiboardSetItemValue(JassMultiboardItem mbi, String val);
        void MultiboardSetItemValueColor(JassMultiboardItem mbi, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void MultiboardSetItemWidth(JassMultiboardItem mbi, Single width);
        void MultiboardSetItemIcon(JassMultiboardItem mbi, String iconFileName);
        void MultiboardSuppressDisplay(Boolean flag);
        void SetCameraPosition(Single x, Single y);
        void SetCameraQuickPosition(Single x, Single y);
        void SetCameraBounds(Single x1, Single y1, Single x2, Single y2, Single x3, Single y3, Single x4, Single y4);
        void StopCamera();
        void ResetToGameCamera(Single duration);
        void PanCameraTo(Single x, Single y);
        void PanCameraToTimed(Single x, Single y, Single duration);
        void PanCameraToWithZ(Single x, Single y, Single zOffsetDest);
        void PanCameraToTimedWithZ(Single x, Single y, Single zOffsetDest, Single duration);
        void SetCinematicCamera(String cameraModelFile);
        void SetCameraRotateMode(Single x, Single y, Single radiansToSweep, Single duration);
        void SetCameraField(JassCameraField whichField, Single value, Single duration);
        void AdjustCameraField(JassCameraField whichField, Single offset, Single duration);
        void SetCameraTargetController(JassUnit whichUnit, Single xoffset, Single yoffset, Boolean inheritOrientation);
        void SetCameraOrientController(JassUnit whichUnit, Single xoffset, Single yoffset);
        JassCameraSetup CreateCameraSetup();
        void CameraSetupSetField(JassCameraSetup whichSetup, JassCameraField whichField, Single value, Single duration);
        Single CameraSetupGetField(JassCameraSetup whichSetup, JassCameraField whichField);
        void CameraSetupSetDestPosition(JassCameraSetup whichSetup, Single x, Single y, Single duration);
        JassLocation CameraSetupGetDestPositionLoc(JassCameraSetup whichSetup);
        Single CameraSetupGetDestPositionX(JassCameraSetup whichSetup);
        Single CameraSetupGetDestPositionY(JassCameraSetup whichSetup);
        void CameraSetupApply(JassCameraSetup whichSetup, Boolean doPan, Boolean panTimed);
        void CameraSetupApplyWithZ(JassCameraSetup whichSetup, Single zDestOffset);
        void CameraSetupApplyForceDuration(JassCameraSetup whichSetup, Boolean doPan, Single forceDuration);
        void CameraSetupApplyForceDurationWithZ(JassCameraSetup whichSetup, Single zDestOffset, Single forceDuration);
        void CameraSetTargetNoise(Single mag, Single velocity);
        void CameraSetSourceNoise(Single mag, Single velocity);
        void CameraSetTargetNoiseEx(Single mag, Single velocity, Boolean vertOnly);
        void CameraSetSourceNoiseEx(Single mag, Single velocity, Boolean vertOnly);
        void CameraSetSmoothingFactor(Single factor);
        void SetCineFilterTexture(String filename);
        void SetCineFilterBlendMode(JassBlendMode whichMode);
        void SetCineFilterTexMapFlags(JassTextureMapFlags whichFlags);
        void SetCineFilterStartUV(Single minu, Single minv, Single maxu, Single maxv);
        void SetCineFilterEndUV(Single minu, Single minv, Single maxu, Single maxv);
        void SetCineFilterStartColor(Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void SetCineFilterEndColor(Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void SetCineFilterDuration(Single duration);
        void DisplayCineFilter(Boolean flag);
        Boolean IsCineFilterDisplayed();
        void SetCinematicScene(Int32 portraitUnitId, JassPlayerColor color, String speakerTitle, String text, Single sceneDuration, Single voiceoverDuration);
        void EndCinematicScene();
        void ForceCinematicSubtitles(Boolean flag);
        Single GetCameraMargin(Int32 whichMargin);
        Single GetCameraBoundMinX();
        Single GetCameraBoundMinY();
        Single GetCameraBoundMaxX();
        Single GetCameraBoundMaxY();
        Single GetCameraField(JassCameraField whichField);
        Single GetCameraTargetPositionX();
        Single GetCameraTargetPositionY();
        Single GetCameraTargetPositionZ();
        JassLocation GetCameraTargetPositionLoc();
        Single GetCameraEyePositionX();
        Single GetCameraEyePositionY();
        Single GetCameraEyePositionZ();
        JassLocation GetCameraEyePositionLoc();
        void NewSoundEnvironment(String environmentName);
        JassSound CreateSound(String fileName, Boolean looping, Boolean is3D, Boolean stopwhenoutofrange, Int32 fadeInRate, Int32 fadeOutRate, String eaxSetting);
        JassSound CreateSoundFilenameWithLabel(String fileName, Boolean looping, Boolean is3D, Boolean stopwhenoutofrange, Int32 fadeInRate, Int32 fadeOutRate, String SLKEntryName);
        JassSound CreateSoundFromLabel(String soundLabel, Boolean looping, Boolean is3D, Boolean stopwhenoutofrange, Int32 fadeInRate, Int32 fadeOutRate);
        JassSound CreateMIDISound(String soundLabel, Int32 fadeInRate, Int32 fadeOutRate);
        void SetSoundParamsFromLabel(JassSound soundHandle, String soundLabel);
        void SetSoundDistanceCutoff(JassSound soundHandle, Single cutoff);
        void SetSoundChannel(JassSound soundHandle, Int32 channel);
        void SetSoundVolume(JassSound soundHandle, Int32 volume);
        void SetSoundPitch(JassSound soundHandle, Single pitch);
        void SetSoundPlayPosition(JassSound soundHandle, Int32 millisecs);
        void SetSoundDistances(JassSound soundHandle, Single minDist, Single maxDist);
        void SetSoundConeAngles(JassSound soundHandle, Single inside, Single outside, Int32 outsideVolume);
        void SetSoundConeOrientation(JassSound soundHandle, Single x, Single y, Single z);
        void SetSoundPosition(JassSound soundHandle, Single x, Single y, Single z);
        void SetSoundVelocity(JassSound soundHandle, Single x, Single y, Single z);
        void AttachSoundToUnit(JassSound soundHandle, JassUnit whichUnit);
        void StartSound(JassSound soundHandle);
        void StopSound(JassSound soundHandle, Boolean killWhenDone, Boolean fadeOut);
        void KillSoundWhenDone(JassSound soundHandle);
        void SetMapMusic(String musicName, Boolean random, Int32 index);
        void ClearMapMusic();
        void PlayMusic(String musicName);
        void PlayMusicEx(String musicName, Int32 frommsecs, Int32 fadeinmsecs);
        void StopMusic(Boolean fadeOut);
        void ResumeMusic();
        void PlayThematicMusic(String musicFileName);
        void PlayThematicMusicEx(String musicFileName, Int32 frommsecs);
        void EndThematicMusic();
        void SetMusicVolume(Int32 volume);
        void SetMusicPlayPosition(Int32 millisecs);
        void SetThematicMusicPlayPosition(Int32 millisecs);
        void SetSoundDuration(JassSound soundHandle, Int32 duration);
        Int32 GetSoundDuration(JassSound soundHandle);
        Int32 GetSoundFileDuration(String musicFileName);
        void VolumeGroupSetVolume(JassVolumeGroup vgroup, Single scale);
        void VolumeGroupReset();
        Boolean GetSoundIsPlaying(JassSound soundHandle);
        Boolean GetSoundIsLoading(JassSound soundHandle);
        void RegisterStackedSound(JassSound soundHandle, Boolean byPosition, Single rectwidth, Single rectheight);
        void UnregisterStackedSound(JassSound soundHandle, Boolean byPosition, Single rectwidth, Single rectheight);
        JassWeatherEffect AddWeatherEffect(JassRect where, Int32 effectID);
        void RemoveWeatherEffect(JassWeatherEffect whichEffect);
        void EnableWeatherEffect(JassWeatherEffect whichEffect, Boolean enable);
        JassTerrainDeformation TerrainDeformCrater(Single x, Single y, Single radius, Single depth, Int32 duration, Boolean permanent);
        JassTerrainDeformation TerrainDeformRipple(Single x, Single y, Single radius, Single depth, Int32 duration, Int32 count, Single spaceWaves, Single timeWaves, Single radiusStartPct, Boolean limitNeg);
        JassTerrainDeformation TerrainDeformWave(Single x, Single y, Single dirX, Single dirY, Single distance, Single speed, Single radius, Single depth, Int32 trailTime, Int32 count);
        JassTerrainDeformation TerrainDeformRandom(Single x, Single y, Single radius, Single minDelta, Single maxDelta, Int32 duration, Int32 updateInterval);
        void TerrainDeformStop(JassTerrainDeformation deformation, Int32 duration);
        void TerrainDeformStopAll();
        JassEffect AddSpecialEffect(String modelName, Single x, Single y);
        JassEffect AddSpecialEffectLoc(String modelName, JassLocation where);
        JassEffect AddSpecialEffectTarget(String modelName, JassWidget targetWidget, String attachPointName);
        void DestroyEffect(JassEffect whichEffect);
        JassEffect AddSpellEffect(String abilityString, JassEffectType t, Single x, Single y);
        JassEffect AddSpellEffectLoc(String abilityString, JassEffectType t, JassLocation where);
        JassEffect AddSpellEffectById(Int32 abilityId, JassEffectType t, Single x, Single y);
        JassEffect AddSpellEffectByIdLoc(Int32 abilityId, JassEffectType t, JassLocation where);
        JassEffect AddSpellEffectTarget(String modelName, JassEffectType t, JassWidget targetWidget, String attachPoint);
        JassEffect AddSpellEffectTargetById(Int32 abilityId, JassEffectType t, JassWidget targetWidget, String attachPoint);
        JassLightning AddLightning(String codeName, Boolean checkVisibility, Single x1, Single y1, Single x2, Single y2);
        JassLightning AddLightningEx(String codeName, Boolean checkVisibility, Single x1, Single y1, Single z1, Single x2, Single y2, Single z2);
        Boolean DestroyLightning(JassLightning whichBolt);
        Boolean MoveLightning(JassLightning whichBolt, Boolean checkVisibility, Single x1, Single y1, Single x2, Single y2);
        Boolean MoveLightningEx(JassLightning whichBolt, Boolean checkVisibility, Single x1, Single y1, Single z1, Single x2, Single y2, Single z2);
        Single GetLightningColorA(JassLightning whichBolt);
        Single GetLightningColorR(JassLightning whichBolt);
        Single GetLightningColorG(JassLightning whichBolt);
        Single GetLightningColorB(JassLightning whichBolt);
        Boolean SetLightningColor(JassLightning whichBolt, Single r, Single g, Single b, Single a);
        String GetAbilityEffect(String abilityString, JassEffectType t, Int32 index);
        String GetAbilityEffectById(Int32 abilityId, JassEffectType t, Int32 index);
        String GetAbilitySound(String abilityString, JassSoundType t);
        String GetAbilitySoundById(Int32 abilityId, JassSoundType t);
        Int32 GetTerrainCliffLevel(Single x, Single y);
        void SetWaterBaseColor(Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void SetWaterDeforms(Boolean val);
        Int32 GetTerrainType(Single x, Single y);
        Int32 GetTerrainVariance(Single x, Single y);
        void SetTerrainType(Single x, Single y, Int32 terrainType, Int32 variation, Int32 area, Int32 shape);
        Boolean IsTerrainPathable(Single x, Single y, JassPathingType t);
        void SetTerrainPathable(Single x, Single y, JassPathingType t, Boolean flag);
        JassImage CreateImage(String file, Single sizeX, Single sizeY, Single sizeZ, Single posX, Single posY, Single posZ, Single originX, Single originY, Single originZ, Int32 imageType);
        void DestroyImage(JassImage whichImage);
        void ShowImage(JassImage whichImage, Boolean flag);
        void SetImageConstantHeight(JassImage whichImage, Boolean flag, Single height);
        void SetImagePosition(JassImage whichImage, Single x, Single y, Single z);
        void SetImageColor(JassImage whichImage, Int32 red, Int32 green, Int32 blue, Int32 alpha);
        void SetImageRender(JassImage whichImage, Boolean flag);
        void SetImageRenderAlways(JassImage whichImage, Boolean flag);
        void SetImageAboveWater(JassImage whichImage, Boolean flag, Boolean useWaterAlpha);
        void SetImageType(JassImage whichImage, Int32 imageType);
        JassUberSplat CreateUbersplat(Single x, Single y, String name, Int32 red, Int32 green, Int32 blue, Int32 alpha, Boolean forcePaused, Boolean noBirthTime);
        void DestroyUbersplat(JassUberSplat whichSplat);
        void ResetUbersplat(JassUberSplat whichSplat);
        void FinishUbersplat(JassUberSplat whichSplat);
        void ShowUbersplat(JassUberSplat whichSplat, Boolean flag);
        void SetUbersplatRender(JassUberSplat whichSplat, Boolean flag);
        void SetUbersplatRenderAlways(JassUberSplat whichSplat, Boolean flag);
        void SetBlight(JassPlayer whichPlayer, Single x, Single y, Single radius, Boolean addBlight);
        void SetBlightRect(JassPlayer whichPlayer, JassRect r, Boolean addBlight);
        void SetBlightPoint(JassPlayer whichPlayer, Single x, Single y, Boolean addBlight);
        void SetBlightLoc(JassPlayer whichPlayer, JassLocation whichLocation, Single radius, Boolean addBlight);
        JassUnit CreateBlightedGoldmine(JassPlayer id, Single x, Single y, Single face);
        Boolean IsPointBlighted(Single x, Single y);
        void SetDoodadAnimation(Single x, Single y, Single radius, Int32 doodadID, Boolean nearestOnly, String animName, Boolean animRandom);
        void SetDoodadAnimationRect(JassRect r, Int32 doodadID, String animName, Boolean animRandom);
        void StartMeleeAI(JassPlayer num, String script);
        void StartCampaignAI(JassPlayer num, String script);
        void CommandAI(JassPlayer num, Int32 command, Int32 data);
        void PauseCompAI(JassPlayer p, Boolean pause);
        JassAIDifficulty GetAIDifficulty(JassPlayer num);
        void RemoveGuardPosition(JassUnit hUnit);
        void RecycleGuardPosition(JassUnit hUnit);
        void RemoveAllGuardPositions(JassPlayer num);
        void Cheat(String cheatStr);
        Boolean IsNoVictoryCheat();
        Boolean IsNoDefeatCheat();
        void Preload(String filename);
        void PreloadEnd(Single timeout);
        void PreloadStart();
        void PreloadRefresh();
        void PreloadEndEx();
        void PreloadGenClear();
        void PreloadGenStart();
        void PreloadGenEnd(String filename);
        void Preloader(String filename);
    }
}
